				面向过程和面向对象

	面向对象
		
		
		将大象装进冰箱：
		
		对象:存在两个对象：大象，冰箱
		
				大象必须会移动，冰箱需要会开门，关门
		
				大象的体积  冰箱的容积

		例子： 先想好做一个什么样的盒子，再去找对应的工具去做
		

	面向过程
		
		将一个问题分成若干个小的过程，串联起来，将问题实现
		
		将大象装进冰箱：
	
			 1.打开冰箱 
			
			 2.把大象塞进冰箱
			
			 3.关上冰箱门
		
		例子： 不去想做什么样子的盒子，随机取工具制作	
		
	面向对象和面向过程相辅相成，面向对象是宏观上解决问题的一种解决思路  微观上用面向过程

				类与对象
				
	
		对象是对客观事物的抽象  类是对对象的抽象
		
		是一种抽象的数据类型
	
		对象是类的实例，类是对象的模板
	
	类 用class 表明  类名必须大写
		
	类的声明  类名 对象名 ； 开辟栈内存空间
	
	类的实例化 对象名=new 类名(); 
				
				new 开辟堆内存 
	
	类有属性和方法
			
			属性也叫字段
	
	静态变量
		
		由static修饰的变量称为静态变量，也称类变量 成员变量  
		
		在类中是全局变量，可以被类中的所有方法调用
		
		中的值由JVM自动初始化 0 0.0 '/0' false
	
	
	面向对象的三大特征

		封装性
			
			对外部不可见
				
				属性用private修饰
				
				setter getter 方法
			
		继承性
			
			扩展父类的功能
			
			运用的是extends关键字
			
			Java只允许单继承
			
			子类(派生类)不能直接访问父类的私有成员	需要用getter或setter
			
			在子类对象实例化前，必须先调用父类的构造方法，之后调用子类构造方法
					
					编译时子类构造方法自动加 super();调用父类构造方法
			
			super关键字
				
				 强行调用父类方法的执行  
			
				不一定在重写时使用，也可以表示那些方法是从父类中继承而来的
				
		多态性
			
			方法的重载和重写
			
			对象的多态性
					
				class A（）{
					tell1（）{
					 println（"A--tell1"）;
					}
					tell2（）{
					 println（"A--tell2"）;
					}
				}
				
				class B extends A（）{
					tell1（）{
					 println（"B--tell1"）;
					}
					tell3（）{
					 println（"B--tell3"）;
					}
				}
				
				向上转型:程序会自动完成
				
					父类 父类对象=子类实例
					
					子类实例 B b=new B();
					
					父类对象 A a=b; A a=new B();
						a.tell1(); 重写的
						a.tell2();
						a调用不到 tell3();方法 
						B--tell1;
						A--tell2;
						
				
				向下转型：强制类型转换
				
					子类 子类对象=(子类)父类实例
					
					 先发生向上转型再发生向下转型
					 
						向上转型
						
							A a=new B();
							
							B b=(B) a;
							
							b.tell1（）;
							b.tell2（）;
							b.tell3（）;
							
							B--tell1;
							A--tell2;
							B--tell3;
					
	
	方法
		是一段封装的可重复调用的代码段   main方法是程序的入口   访问修饰  返回值类型  方法名
		
		eg：main(){ String result=pround(3.758,2}}  该方法保留小数点后任意位
	
		static double pround(double value,int index){
			doublie pow10=Math.pow(10,index);
			double result=value*pow10;
			result=result*1.0/pow10;
			return result;
		}
	
	方法重载（Overloading）
	
		方法名相同  
		
		参数类型和个数不同   
	
		发生在一个类中
		
	方法重写(Overriding)
	
		返回值 方法名 参数类型必须完全相同  
		
		子类异常不能大于父类异常
		
		子类方法的访问级别不能低于父类访问级别
		
		发生在继承中
		
		访问级别  
		
			private < default < protect < public 	
			
			private 当前类
			
			default 当前包
			
			protect 其他包
			
			public 当前工程
			
		
	
	方法的递归调用
		
		方法自己调自己	
		
	Eg: 100+99+98+……+1

		addNum(100);

		addNum(int num){
			if(num==1){	//程序出口
			return 1; 
			}else{
			 return num+addNum(num-1);
			}
		}
	
	构造方法
		
		访问修饰符 类名称(){
			语句
			无返回值类型
		}
		
	instanceof 
			
		判断一个对象到底是不是一个类的实例
		
		返回值为布尔类型