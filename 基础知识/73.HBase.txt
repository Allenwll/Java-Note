					HBase


					
1.基本概念

	是一个高可靠、高性能、面向列、可伸缩的分布式数据库
	
	HBase是一个构建在HDFS上的分布式列存储系统
	
	HBase是基于Google BigTable模型开发的,典型的key/value系统
	
	HBase是Apache Hadoop生态系统中的重要一员,主要用于海量结构化数据存储,存储的是非结构化和半结构化的松散数
	
	从逻辑上讲,HBase将数据按照表,行和列进行存储
	
	与Hadoop一样,HBase目标主要依靠横向扩展,通过不断增加廉价的商用服务器来增加计算和存储能力
	
2.HBase表的特点

	大:
	
		一个表可以有数十亿行,上百万列
	
	无模式:
	
		每行都有一个可排序的主键和任意多的列
		
		列可以根据需要动态的增加
		
		同一张表中不同的行可以有截然不同的列
		
	面向列:
				
		面向列(族)的存储和权限控制,列(族)独立检索
		
	稀疏:
		
		空列并不占用存储空间,表可以设计的非常稀疏
		
	数据多版本:
		
		每个单元中的数据可以有多个版本,默认情况下版本号自动分配,是单元格插入时的时间戳
		
	数据类型单一:
		
		HBase中的数据都是字符串,没有类型

3.数据模型相关概念

	表:
		
		HBase采用表来组织数据,表由行和列组成,列划分为若干个列族
		
	行:
		
		每个HBase表都由若干行组成,每个行由行键(Row Key)来标识
		
	列族:
		
		一年HBase表被分组成许多"列族"(Column Family)的集合,它是基本的访问控制单元
		
	列限定符:
	
		列族里的数据通过列限定符(或列)来定位
		
	单元格:
	
		通过列、列族和列限定符确定一个"单元格"(Cell),单元格中存储的数据没有数据类型,总被视为字节数组byte[]
		
	时间戳:
		
		每个单元格都保存着同一份数据的多个版本,这些版本采用时间戳进行索引
		
4.实现HBase包括三个主要的功能组件

	 a)供客户端使用的库函数
	
	 b)一个Master主服务器
	
	 c)许多个Region服务器
	
	主服务器Master负责管理和维护HBase表的Region信息、维护Region服务器列表、分配Region、负载均衡
	
	Region服务器负责存储和维护分配给自己的Region,处理来自客户端的读写请求
	
	客户端并不是直接从Master主服务器上读取数据,而是在获得Region的存储位置信息后,直接从Region服务器上读取数据
	
	客户端并不依赖Master,而是通过Zookeeper来获得Region位置信息
	
5.系统架构

	1)客户端
	
		包含访问HBase的接口,同时在缓存中维护者已经访问过得Region位置信息,用来加快后续数据访问过程
		
	2)Zookeeper
	
		启动多个Master,但Zookeeper可以帮助选出一个Master作为集群的总管,并保证在任何时刻总有一个Master在运行
		
		免了Master的"单点失效"问题
		
		Zookeeper是一个分布式的、开源的分布式应用程序协调服务,是Google的Chubby一个开源的实现
	
			它致力于提供一个高性能、高可用、且具有严格的顺序访问控制能力的分布式协调服务
			
			分布式应用可以基于它实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知
			
				集群管理、Master选举、分布式锁和分布式队列等功能
			
			它是Hadoop和HBase的重要组件,也被广泛应用在其他分布式系统中
	
	3)Master服务器

		主要负责表和Region的管理工作
			
			1.管理用户对表的增加、删除、修改、查询等操作
			
			2.实现不同Region服务器之间的负载均衡
			
			3.在Region分裂或合并后,负责重新调整Region的分布
			
			4.对发生故障失效的Region服务器上的Region进行迁移
			
	4)Region服务器
	
		Region服务器是HBase中最核心的模块,负责维护Master分配给自己的Region,并响应用户的读写请求
			
6.Region服务器工作原理

	用户写数据
		
		用户写入数据时,被分配到相应Region服务器去执行
		
		1.用户数据首先被写入到HLog中
		
		2.用户数据然后被写入到MemStore中
		
		3.MemStore中的数据被写入StoreFile中
		
		4.清空缓存并在HLog中写入标记来表明数据已经写入StoreFile

	用户读数据
	
		当用户读取数据时,Region服务器会首先访问MemStore缓存,如果找不到,再去磁盘上的StoreFile上找
		
7.Store工作原理

	Store是Region服务器的核心
	
	当StoreFile的数量到达合并阈值时,多个StoreFile合并成一个
	
	当单个StoreFile的大小超过分裂阈值时,触发分列操作,1个父Region分裂为2个子Region
	
8.HLog服务器的工作原理

	当Region服务器发生故障,MemStore缓存中的数据还没写入StoreFile中,会全部丢失
	
	1)HBase利用HLog保证系统发生故障后能恢复到正确状态
	
		HBase系统为每个Region服务器配置了一个HLog文件
		
		它是一种预写式日志(Write Ahead Log)
		
		用户更新数据必须首先完全写入HLog后,才能写入MemStore缓存,并被刷写到StoreFile中
		
	2)利用HLog进行数据恢复

		1.Zookeeper会实时监测每个Region服务器的状态,当某个Region服务器发生故障时.Zookeeper会通知Master
		
		2.Master首先会处理该故障Region服务器上面遗留的HLog文件,这个遗留的HLog文件中包含了来自多个Region对象的日志记录
		
		3.系统会根据每条日志记录所属的Region对象对HLog进行拆分,分别放到相应Region对象的目录下
		
			然后再将失效的Region重新分配到可用的Region服务器中,并把该Region对象相关的HLog日志记录也发送给相应的Region服务器
			
		4.Region服务器领取到分配给自己的Region对象以及与之相关的HLog日志记录以后,会重新做一遍日志记录种的各种操作
		
			把日志记录种的数据写入到MemStore缓存中,然后刷新到磁盘的StoreFile文件中,完成数据恢复
		
			
	