		索引

SQL 检索数据有两种方法 

	1.全表扫描  
	
	2.使用索引

全表扫描:
	
	表扫描是相当直观.当执行表扫描时,SQL Server从表的物理起点处开始,浏览表中的每一行
	
	当发现和查询条件匹配的行时,就在结果集中包含它们
	
	关于表扫描很多说法都是效率低,但是如果表数据减少的情况下,实际上使用表扫描却是最快的
	
	就是指系统将指针放置在该表的表头数据所在的数据页上,然后按照数据页的排列顺序,一页一页地从前向后扫描该表数据所占有的全部数据页,直至扫描完表中的全部记录
	
	在扫描时,如果找到符合查询条件的记录,那么就将这条记录挑选出来,最后将全部挑选出来符合查询语句条件的记录显示出来
	
使用索引
	
	　在查询优化过程中,优化器查看所有可用的索引结构并且选择最好的一个(这主要基于在连接和WHERE子句中所指定的信息,以及SQL Server在索引结构中保存的统计信息)
	
	一旦选择了索引,SQL Server将在树结构中导航至与条件匹配的数据位置,并且只提取它所需的记录


	索引是一种树状结构,其中存储了关键字和指向包含关键字所在记录的数据页的指针
	
	当使用索引查找时,系统沿着索引的树状结构,根据索引中关键字和指针,找到符合查询条件的的记录
	
	最后将全部查找到的符合查询语句条件的记录显示出来	
	
	

	
索引与表扫描的区别:
	
	因为数据是排序的,所以查询引擎知道它何时到达正在查找的当前范围的下界

	然后它可以结束查询,或者根据需要移至下一数据范围

	EXISTS的工作方式是查到匹配的记录SQL Server就立即停止

	使用索引所获得的性能与使用EXISTS类似甚至更好

	因为查找数据的过程的工作方式是类似的
	
	也就是说,服务器可能使用某种索引知道何时没有相关内容,并且立即停止.
		
	此外,可以对数据执行非常快速的查找(称为SEEK),而不是在整个表中查找


索引类型和索引导航

　　尽管表面上在SQL Server中有两种索引结构(聚集索引和非聚集索引),但就内部而言,有3种不同的索引类型.
	
	聚集索引 Clustered Index
		
		适用情况
		
			1、含有大量非重复值的列.
		
		
			2、使用BETWEEN,>,>=,<或<=返回一个范围值的列
			
			3、被连续访问的列
		
			4、返回大型结果集的查询
			
			5、经常被使用连接或GROUP BY子句的查询访问的列
			
　　非聚集索引,其中非聚集索引又包括以下两种：
　　			
		堆上的非聚集索引
　　			
		聚集表上的非聚集索引


聚集索引(Clustered Index)特点
	
	聚集索引的叶节点就是实际的数据页
		
	聚集索引中的排序顺序仅仅表示数据页链在逻辑上是有序的.而不是按照顺序物理的存储在磁盘上
	
	行的物理位置和行在索引中的位置是相同的
	
	每个表只能有一个聚集索引
	
	聚集索引的平均大小大约为表大小的5%左右

非聚集索引结构
　　	
	非聚集索引与聚集索引具有相同的 B 树结构,它们之间的显著差别在于以下两点：
　　
	 基础表的数据行不按非聚集键的顺序排序和存储.
　　
	非聚集索引的叶层是由索引页而不是由数据页组成.
	
	非聚集索引的页,不是数据,而是指向数据页的页.
		
	若未指定索引类型,则默认为非聚集索引.
	
	叶节点页的次序和表的物理存储次序不同
	
	每个表最多可以有249个非聚集索引
	
	在非聚集索引创建之前创建聚集索引(否则会引发索引重建)
	
使用索引的代价
	
	索引需要占用数据表以外的物理存储空间
	
	创建索引和维护索引要花费一定的时间
	
	当对表进行更新操作时,索引需要被重建,这样降低了数据的维护速度.

建立索引的原则：

1) 定义主键的数据列一定要建立索引

2) 定义有外键的数据列一定要建立索引

3) 对于经常查询的数据列最好建立索引

4) 对于需要在指定范围内的快速或频繁查询的数据列

5) 经常用在WHERE子句中的数据列

6) 经常出现在关键字order by、group by、distinct后面的字段,建立索引.如果建立的是复合索引,索引的字段顺序要和这些关键字后面的字段顺序一致,否则索引不会被使用

7) 对于那些查询中很少涉及的列,重复值比较多的列不要建立索引

8) 对于定义为text、image和bit的数据类型的列不要建立索引

9) 对于经常存取的列避免建立索引 

9) 限制表上的索引数目.对一个存在大量更新操作的表,所建索引的数目一般不要超过3个,最多不要超过5个.索引虽说提高了访问速度,但太多索引会影响数据的更新操作.

10) 对复合索引,按照字段在查询条件中出现的频度建立索引.在复合索引中,记录首先按照第一个字段排序.对于在第一个字段上取值相同的记录,系统再按照第二个字段的取值排序,以此类推.因此只有复合索引的第一个字段出现在查询条件中,该索引才可能被使用,因此将应用频度高的字段,放置在复合索引的前面,会使系统最大可能地使用此索引,发挥索引的作用.


	UNIQUE: 建立唯一索引.

	CLUSTERED: 建立聚集索引.

	NONCLUSTERED: 建立非聚集索引.

Index索引优缺点
	
	优点
	
		创建索引可以大大提高系统的性能.

			1.通过创建唯一性索引,可以保证数据库表中每一行数据的唯一性
			
			2.可以大大加快数据的检索速度,这也是创建索引的最主要的原因
			
			3.可以加速表和表之间的连接,特别是在实现数据的参考完整性方面特别有意义
			
			4.在使用分组和排序子句进行数据检索时,同样可以显著减少查询中分组和排序的时间
			
			5.通过使用索引,可以在查询的过程中,使用优化隐藏器,提高系统的性能
	
	缺点
		
		1.创建索引和维护索引要耗费时间,这种时间随着数据量的增加而增加	
		
		2.索引需要占物理空间,除了数据表占数据空间之外,每一个索引还要占一定的物理空间
		
			如果要建立聚簇索引,那么需要的空间就会更大
			
		3.当对表中的数据进行增加、删除和修改的时候,索引也要动态的维护,这样就降低了数据的维护速度
		
		