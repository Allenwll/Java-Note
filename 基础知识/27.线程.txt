							线程
		              
					  Java.lang.Thread 类
					  
				Java源程序和字节码文件被称为“程序” (Program)，是一个静态的概念。
		
		
	进程 

			执行中的程序叫做进程(Process)，是一个动态的概念。 进程是程序的一次动态执行过程, 占用特定的地址空间.
			
			每个进程由3部分组成：CPU,Data,Code。每个进程都是独立的，保有自己的CPU时间，代码和数据
		
			进程是占用CPU资源的基本单位 
	
			缺点：内存的浪费，CPU的负担
		
	线程
		
			线程是进程中一个“单一的连续控制流程”   执行路径
		
			轻量级进程(lightweight process)。 并发执行  
		
		线程共享相同的内存单元/内存地址空间
	
		可以访问相同的变量和对象，而且它们从同一堆中分配对象通信、数据交换、同步操作

		由于线程间的通信是在同一地址空间上进行的，所以不需要额外的通信机制，这就使得通信更简便而且信息传递的速度也更快。
		
	
	线程和进程的区别
		
		每个进程都有独立的代码和数据空间(进程上下文)，进程间的切换会有较大的开销。
		
		线程可以看成时轻量级的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换的开销小。
		
	
	线程和进程最根本的区别在于：
			
			进程作为资源分配的单位，线程是调度和执行的单位 
		
		
		多进程:
		
			在操作系统中能同时运行多个任务(程序)
		
		
		多线程:

			在同一应用程序中有多个顺序流同时执行
		
		线程是进程的一部分，所以线程有的时候被称为是轻权进程或者轻量级进程。
		
 			一个没有线程的进程是可以被看作单线程的，如果一个进程内拥有多个进程，进程的执行过程不是一条线（线程）的，而是多条线（线程）共同完成的。

		系统在运行的时候会为每个进程分配不同的内存区域，但是不会为线程分配内存（线程所使用的资源是它所属的进程的资源），线程组只能共享资源。
		
		出了CPU之外（线程在运行的时候要占用CPU资源），计算机内部的软硬件资源的分配与线程无关，线程只能共享它所属进程的资源。
	
进程与程序的区别
     
		程序是一组指令的集合，它是静态的实体，没有执行的含义。
		
		进程是一个动态的实体，有自己的生命周期。一般说来，一个进程肯定与一个程序相对应，并且只有 一个
		
		但是一个程序可以有多个进程，或者一个进程都没有。
		
		进程还有并发性和交往性。简单地说，进程是程序的一部分，程序运行的时候会产生进程。

		Java程序有主线程 称为main线程  
		
		Thread.currentThread().getName() 可以得到当前执行该方法的线程的名字

多线程执行，为什么是交替执行的：
		
			CPU有时间片的概念，在某一个时间点，是不是只能做一件事情，并不是真正意义上的并发，宏观上是并发执行，微观上是顺序执行的
			
			CPU将自己处理数据的时间分成了若干个微小的时间片段，在该时间片内执行单个线程。时间片结束后，去执行另一个线程，之前的线程排队等待。  
			
			由于CPU处理速度很快，导致了错觉，像是并发执行的，其实是顺序执行的
	

	
	
