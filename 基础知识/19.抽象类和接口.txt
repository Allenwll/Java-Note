		抽象类和接口
		
	final关键字
		
		完结器 表示最终的意思
		
		能声明类、方法、属性
		
				声明的类 不能被继承   eg: Math  String
				
				声明的方法 不能被重写   对于用final修饰的方法，如果代码量比较小，那么系统在编译过程中，
							会将final类型的方法内的代码嵌入到调用的方法中，实现代码的替换，无需跳转方法
				
				声明的变量会变为常量，常量不能被修改
	
	抽象类
		
		包含一个抽象方法的类就是抽象类
		
		如果一个类为抽象类，那么其中可能有非抽象的方法，可能一个抽象方法也没有
		
			抽象方法
				
				声明而未被实现的方法，抽象方法必须使用abstract关键字声明
		
		抽象类被子类继承，子类(如果不是抽象类)必须重写抽象类中的所有抽象方法
					
				abstract class className(){
						属性
						方法
						抽象方法
				}
				
					private void print(){}；此语句表示方法的空实现。 
					Abstract void print()； 此语句表示方法的抽象，无实现。
		
		抽象类不能直接实例化，要通过其子类进行实例化
		
	 
	接口
		
		一种特殊的类，里面是由全局常量和公共的抽象方法所组成
		
				interface interfaceName{
						
						全局常量 public static final int AGE=100;
						
						抽象方法
				}
		
		接口的实现必须通过子类，使用implements，而且接口可以多实现 implements 接口1，接口2
	
		一个类可以可以同时继承抽象类和实现接口
	
		一个接口不能继承一个抽象类，但是却可以通过extends关键字同时继承多个接口
		实现接口的多继承  接口 extends 接口1,接口2

	
	抽象类和接口的相同点和不同点
	
	相同点：
		1.都不能被直接实例化，都可以通过继承实现其抽象方法
		
		2.都是面向对象的技术基础，实现了诸多设计模式
	不同点：
		1.接口支持多继承，抽象类不能实现多继承。
		2.接口只能定义抽象规则，抽象类即可以定义抽象规则还可以提供已实现的方法。（即：接口只能定义虚拟方法，而抽象类即可定义虚拟方法，还可提供实方法。）
		3.接口是一组行为规范，抽象类是一个不完整的类（着重族的概念）。
		4.接口可以支持回调，抽象类不能实现回调因为继承不支持
		5.接口只包含方法、属性、索引器、事件的签名，但不能定义字段和包含实现的方法；抽象类可以定义字段、属性，包含实现的方法。
		6.接口可以用于值类型和引用类型；抽象类只能作用于引用类型。例sturct就可以继承接口而不能继承类
	
		
		
		
	
		
	