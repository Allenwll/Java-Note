			泛型
			
简介:
	
	是JDK5中引入的，提供了编译时类型安全检测机制，允许程序员在编译时检测到非法的类型
	
	参数化类型，即所操作的数据类型被指定为一个参数(类型形参)，然后在使用时传入具体的类型
	
	本质是为了在不创建新的类型的情况下，通过泛型指定不同的类型来控制形参具体限制的类型
	
	这种参数类型可以用在类、接口、方法中，分别称为泛型类、泛型接口、泛型方法
	
特性：
	
	只在编译阶段有效，不会进入到运行时阶段
	
	在编译之后程序会采取去泛型化的措施，正确验证泛型结果后，将泛型的相关信息猜出
	
	并在对象进入和离开方法的边界处添加类型检查和类型转换的方法
	
泛型类：
		
	泛型类型用于类的定义中，被称为泛型类。
	
	通过泛型可以完成对一组类的操作对外开放相同的接口。
	
	最典型的就是各种容器类，如：List、Set、Map。
	
	class 类名称 <泛型标识：可以随便写任意标识号，标识指定的泛型的类型>{
		private 泛型标识 /* 成员变量类型*/ var;
	}
	
	//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型
	//在实例化泛型类时，必须指定T的具体类型
	public class Generic<T>{ 
		//key这个成员变量的类型为T,T的类型由外部指定  
		private T key;

		public Generic(T key) { //泛型构造方法形参key的类型也为T，T的类型由外部指定
			this.key = key;
		}

		public T getKey(){ //泛型方法getKey的返回值类型为T，T的类型由外部指定
			return key;
		}
	}
	
	//泛型的类型参数只能是类类型（包括自定义类），不能是简单类型
	//传入的实参类型需与泛型的类型参数类型相同，即为Integer.
	Generic<Integer> genericInteger = new Generic<Integer>(123456);
	
	
	在使用泛型的时候如果传入泛型实参，则会根据传入的泛型实参做相应的限制，此时泛型才会起到本应起到的限制作用。
	
	如果不传入泛型类型实参的话，在泛型类中使用泛型的方法或成员变量定义的类型可以为任何的类型
	
	不能对确切的泛型类型使用instanceof操作。如下面的操作是非法的，编译时会出错。
	
	if(ex_num instanceof Generic<Number>){ }
	
泛型接口:

	泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中
	
	//定义一个泛型接口
	public interface Generator<T> {
		public T next();
	}

	未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中
	
		class FruitGenerator<T> implements Generator<T>{}  
		
		如果不声明泛型，如：class FruitGenerator implements Generator<T>，编译器会报错："Unknown class"
		
	当实现泛型接口的类，传入泛型实参时：
	
		在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型
		
		Generator<T>，public T next();中的的T都要替换成传入的String类型
		
		public class FruitGenerator implements Generator<String> {
			@Override
			public String next() {
				Random rand = new Random();
				return fruits[rand.nextInt(3)];
			}
		}
		
泛型通配符：
	
	同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的
	
	可以解决当具体类型不确定的时候，这个通配符就是 ?  
	
	当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。那么可以用 ? 通配符来表未知类型
	
	public void showKeyValue1(Generic<?> obj){
		Log.d("泛型测试","key value is " + obj.getKey());
	}	
	
	类型通配符一般是使用？代替具体的类型实参，此处’？’是类型实参，而不是类型形参 
	
	此处的？和Number、String、Integer一样都是一种实际的类型，可以把？看成所有类型的父类。是一种真实的类型
	
泛型方法:
	
	泛型类，是在实例化类的时候指明泛型的具体类型
	
	泛型方法，是在调用方法的时候指明泛型的具体类型
	
	public 与 返回值中间<T>非常重要，可以理解为声明此方法为泛型方法。
	
	只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法
	
	<T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T
	
	与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。
	public <T> T genericMethod(Class<T> tClass)throws InstantiationException ,
	  IllegalAccessException{
			T instance = tClass.newInstance();
			return instance;
	}

静态方法与泛型：

		如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 。
		
		public static <T> void show(T t){
		}

泛型上下边界：
			
	为泛型添加上边界，即传入的类型实参必须是指定类型的子类型

	public void showKeyValue1(Generic<? extends Number> obj){
		Log.d("泛型测试","key value is " + obj.getKey());
	}	
		
泛型数组:
	
	在java中是”不能创建一个确切的泛型类型的数组”的。
	
	List<String>[] ls = new ArrayList<String>[10];   错误
	
	使用通配符创建泛型数组是可以的
	
	List<?>[] ls = new ArrayList<?>[10];
	
	数组的类型不可以是类型变量，除非是采用通配符的方式，
	
	因为对于通配符的方式，最后取出数据是要做显式的类型转换的
	
	
		
	