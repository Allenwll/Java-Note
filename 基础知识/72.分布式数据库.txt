					分布式数据库
					
1.有4款典型用于大数据存储和管理的分布式数据库系统:

	A)并行数据库

	B)NoSQL数据管理系统
	
	C)NewSQL数据管理系统
	
	D)云数据管理系统
	
2.并行数据库

	定义:
	
		通过并行使用多个CPU和磁盘来将诸如装载数据、建立索引、执行查询等操作并行化以提高性能的数据库系统
		
		往往运行在通用计算机组成的集群环境中
		
	优点:
		
		通过多个节点并行执行数据库任务、提高整个数据库系统的性能和可用性
	
	不足:
		
		并行数据库设计和优化时认为集群中节点数量是固定的
		
		如果对集群进行扩展或收缩,数据转移成本高,还会导致系统一段时间不可用
		
		认为节点故障是特例,因此只提供事务级别的容错,如果查询过程中节点出错,整个查询需要重运行

3.NoSQL数据管理系统	

	定义:
		
		没有固定数据模式并且可以水平扩展的系统成为NoSQL,NoSQL不支持关系数据模型
		
	优点:
		
		数据模型简单,每条记录拥有唯一的键,一次操作获取单个记录增强了系统可扩展性
		
		能够基于低端硬件(通用PC机)进行水平扩展,灵活性高,成本低
		
		吞吐量高于传统关系数据管理系统
		
	不足
	
		不支持ACID特性,ACID特性能够使系统在中断的情况下保证在线事务能够准确执行
		
		特工不同的查询模型,增加了开发者负担
		
4.NewSQL数据管理系统

	定义:
		
		既能够支持传统关系型数据库的ACID事物特性和SQL查询,又能够提供NoSQL数据管理系统的可扩展性的数据管理系统
		
		NewSQL是对传统基于SQL的关系型数据库的创新
	
	特性:
		
		支持关系数据模型
		
		使用SQL作为主要接口
		
		具有高吞吐量和高可扩展性
		
	代表数据库

		Spanner、 VoltDB
		
	
5.云数据管理系统
	
	定义:
		
		基于云计算技术的数据管理系统,用户无需在本地安装数据库软件,只需使用"云数据库服务提供商"提供的数据库服务即可
		
	优点:
		
		用户无需购买基础设施和软件,性价比高
		
		用户可以根据自己的需求申请存储资源即可,并可以根据应用需求动态变化,可伸缩性号
		
		用户无需考虑云数据库底层的硬件和软件实现,只需要通过其提供的接口使用其服务
		
	不足:
	
		存储在云数据库中的数据可能会造成隐私泄露
		
6.NoSQL

	特点:
		
		1)数据模型灵活、简洁
		
		2)水平可扩展性强
		
		3)系统吞吐量高
		
	兴起原因:
	
		1)传统数据库无法满足海量数据的管理需求
		
		2)传统数据库无法满足数据高并发的需求
		
		3)传统数据库无法满足高扩展性和高可用性的需求
		
		A)网络大数据系统通常不需要严格的数据库事务
		
		B)网络大数据系统往往并不要求严格的读写实时性
		
		C)网络大数据系统通常不包含大量复杂的SQL查询
		
	应用场景:
	
		关系型数据库应用场景:
		
			传统企业(银行、电信)的关键业务系统,需要保证事务一致性
			
		NoSQL数据库应用场景：
		
			互联网企业、传统企业的非关键业务(比如数据分析和挖掘)
	
	四大类型
	
		A)键值数据库
			
			相关产品	
				
				Redis、Riak、SimpleDB、Memcached、Scalaris
			
			数据模型
					
				键/值对
				
				键是一个字符串对象
				
				值可以是任意类型的数据,比如整型,字符型,数组,列表,集合等
			
			典型应用
			
				涉及频繁读写、拥有简单数据模型的应用
				
				内存缓存(会话、配置文件、参数、购物车)
				
			优点
			
				扩展性好,灵活性好,大量写操作时性能高
				
			缺点
			
				难以存储结构化信息,条件查询效率较低
				
			不适用场景
			
				不是通过键而是通过值来查:键值数据库根本没有通过值查询的途径
				
				需要存储数据之间的关系：在键值数据库中,不能通过两个或两个以上的键来关联数据
				
				需要事务的支持:在一些键值数据库中,产生故障时,不可以回滚
		
		B)列族数据库
				
			相关产品	
				
				BigTable, HBase, Cassndra, HadoopDB, GreenPlum
			
			数据模型
					
				列存储
			
			典型应用
			
				数据在地理上分布于多个数据中心的应用程序
				
				可以容忍副本中存在短期不一致情况的应用程序
				
				拥有动态字段的应用程序
				
				拥有潜在大量数据的应用程序(TB级以上)
				
			优点
			
				查找速度快,可扩展性,容易进行扩展,复杂性低
				
			缺点
			
				难以存储结构化信息,条件查询效率较低
				
			不适用场景
			
				需要ACID事务支持的场景
			
		C)文档数据库
			
			相关产品	
				
				MongoDB, CouchDB, RavenDB, Terrastore, ThruDB
			
			数据模型
					
				键/值
				
				值(value)是版本化的(有结构)文档
			
			典型应用
			
				存储、索引并管理面向文档的数据或者类似的半结构化数据
				
				例如,用于后台具有大量读写操作的网站,使用JSON数据结构的应用
				
				使用嵌套结构等非规范化数据的应用程序
				
			优点
			
				数据结构灵活,复杂性低,性能好(高并发)
				
				提供嵌入式文档功能,将经常查询的数据存储在同一个文档中
				
				既可以根据键来构建索引,也可以根据内容构建索引
				
			缺点
			
				缺乏统一的查询语法
				
			不适用场景
			
				在不同文档上添加事务的场景
				
				需要支持文档间的事务的场景
		
		D)图形数据库
		
			相关产品	
				
				Neo4J, OrientDB, InfoGrid, Infinite Graph, Trinity
				
			数据模型
				
				图结构
				
			典型应用
				
				专门用于处理具有高度相互关联关系的数据
				
				比较适合于社交网络分析,路径规划,依赖分析等问题
				
			优点
			
				可用于构建复杂的关系图谱,并支持复杂的图算法
				
			不足
				
				复杂性高,只能支持一定的数据规模
				
	理论基础
	
		
		CAP:
		
			C(Consistency)：一致性,是指任何一个读操作总是能读到之前完成的写操作的结果
			
				也就是在分布式环境中,多点的数据是一致的,或者说:所有节点在同一时间具有相同的数据
				
			A(Availability): 可用性,是指快速获取数据,可以在确定的时间内返回操作结果
			
				保证每个请求不管成功或者失败都有响应
				
			P(Tolerance Of Network Partition)：分区容忍性,是指当出现网络分区的情况时(即
			
				系统中的一部分节点无法和其他节点进行通信),分离的系统也能够正常运行,也就是说,
				
				系统中任意信息的丢失或失败不会影响系统的继续运作
				
		CAP理论告诉我们,一个分布式系统不可能同事满足一致性,可用性和分区容忍性这三个最多只能同事时满足其中两个
		
		 CA: 强调一致性和可用性,放弃分区容忍性
			
			把所有与事务相关的内容都放到同一台机器上
		 
			这种做法会严重影响系统的可扩展性
			
				MySQL,SQL Server和PostgreSQL
			
		 CP: 强调一致性和分区容忍性,放弃可用性
				
			当出现网络分区的情况时,受影响的服务需要等待数据一致,因此在等待期间就无法对外提供服务
				
				Dynamo、 Cassandra、Voldemort、CouchDB、Riak
				
		 AP: 强调可用性和分区容忍性,放弃一致性
			
			允许系统返回不一致的数据
				
				Neo4J、BigTable、MongoDB、HBase、Hypertable、Redis
				
		ACID:
			
			A(Atomicity)：原子性
			
				是指事务必须是原子工作单元,对于其数据修改,要么全都执行,要么全都不执行
				
			C(Consistency): 一致性
			
				是指事务在完成时,必须使所有的数据都保持一致状态
				
			I(Isolation): 隔离性
			
				是指由并发事务所做的修改必须与任何其它并发事务所做的修改隔离
				
			D(Durability): 持久性
			
				是指事务完成之后,它对于系统的影响是永久性的,该修改即使出现致命的系统故障也将一直保持
				
		BASE：
		
			BA(Basically Availble)：基本可用
			
				是指一个分布式系统的一部分发生问题变得不可用时,其他部分仍然可以正常使用
				
				也就是允许分区失败的情形出现
				
			S(Soft-state):软状态
			
				硬状态(Hard-state)
				
					数据库保存的数据是"硬状态"时,可以保证数据一致性,即保证数据一直是正确的
				
				软状态是指允许系统中的数据存在中间状态,并认为该中间状态的存在不会影响系统的整体可用性
				
				即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时
				
			E(Eventual consistency)：最终一致性
			
				一致性的类型包括强一致性和弱一致性
				
				二者的主要区别在于高并发的数据访问操作下,后续操作是否能够获取最新的数据
		
				强一致性：
					
					当执行完一直更新操作后,后续的其他读操作就可以保证读到跟更新后的最新数据
					
				弱一致性:
					
					不能保证后续访问读到的都是更新后的最新数据
					
				最终一致性：
					
					是弱一致性的一种特例,允许后续的访问操作可以暂时读不到更新后的数据
					
					但是经过一段时间之后,必须最终读到更新后的数据
					
				
					
					
			
				