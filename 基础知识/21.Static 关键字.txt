			static “全局”或者“静态”
		    
			static修饰的成员变量和成员方法独立于该类的任何对象。 它不依赖类特定的实例，被类的所有实例共享 
		
		只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。
		
			因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。
	
		     
		用public修饰的static成员变量和成员方法本质是全局变量和全局方法，
		
		当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。
		
		
		 	satic变量前可以有private修饰，表示这个变量可以在类的静态代码块中，
		
		或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用），
		
		但是不能在其他类中通过类名来直接引用
	
		
1、static变量

					
		被static修饰的变量，叫静态变量或类变量 生存周期依赖于类 所以称为 类变量
		
		没有被static修饰的变量，叫实例变量。

		两者的区别是：

			对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。

			对于实例变量，每创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。

		所以一般在需要实现以下两个功能时使用静态变量：

			1).在对象之间共享值时
						
			2).方便访问变量时

2、静态方法

		直接通过类名调用，任何的实例也都可以调用，因此不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 即没有static的属性和方法
				
		只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！

		因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。

		是类内部的一类特殊方法，只有在需要时才将对应的方法声明成静态的，一个类内部的方法一般都是非静态的

3、static代码块

		也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，只能访问静态成员
				
		位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，
				41  场
		如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。
				
4、static和final一块用表示什么

		static final用来修饰成员变量和成员方法，可简单理解为“全局常量”！

		对于变量，表示一旦给值就不可修改，并且通过类名可以访问。

		对于方法，表示不可覆盖，并且可以通过类名直接访问。

		有时你希望定义一个类成员，使它的使用完全独立于该类的任何对象。
				
		通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，
		
			它能够被它自己使用，而不必引用特定的实例。
				
			在成员的声明前面加上关键字static(静态的)就能创建这样的成员。
				
		如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。
				
			你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。
				
			因为在程序开始执行时必须调用main() ，所以它被声明为static。
		
		声明为static的变量实质上就是全局变量。当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量。
				
		声明为static的方法有以下几条限制：

				1).它们仅能调用其他的static 方法。
						
				2).它们只能访问static数据。
						
				3).它们不能以任何方式引用this 或super
