				ESB企业服务总线
		
1.中间件		
	是一种独立的系统软件或服务程序,分布式应用软件借助这种软件在不同的技术之间共享资源
	
	中间件位于客户机/ 服务器的操作系统之上,管理计算机资源和网络通讯
	
	是连接两个独立应用程序或独立系统的软件,相连接的系统,即使它们具有不同的接口,但通过中间件相互之间仍能交换信息
	
	执行中间件的一个关键途径是信息传递.通过中间件,应用程序可以工作于多平台或OS环境
		
2.ESB	
	
	ESB全称为Enterprise Service Bus 即企业服务总线
	
	是传统中间件技术与XML、Web服务等技术结合的产物
	
	ESB提供了网络中最基本的连接中枢,是构筑企业神经系统的必要元素
	
	ESB提供了事件驱动和文档导向的处理模式,以及分布式的运行管理机制,它支持基于内容的路由和过滤,具备了复杂数据的传输能力,并可以提供一系列的标准接口
	
3.ESB的优势

	ESB的出现改变了传统的软件架构,可以提供比传统中间件产品更为廉价的解决方案,
	
	同时它还可以消除不同应用之间的技术差异,让不同的应用服务器协调运作,实现了不同服务之间的通信与整合.

4.ESB的基本概念
	
	企业服务总线(EnterpriseServiceBus,ESB)从面向服务体系架构(Service-OrientedArchitecture,SOA)发展而来,是传统中间件技术与XML、Web服务等技术结合的产物.
	
	ESB采用了“总线”这样一种模式来管理和简化应用之间的集成拓扑结构,以广为接受的开放标准为基础来支持应用之间在消息、事件和服务级别上动态的互连互通,
	
	是一种在松散耦合的服务和应用之间标准的集成方式.
	
	它可以作用于：
		
		①面向服务的架构―分布式的应用由可重用的服务组成
		
		②面向消息的架构―应用之间通过ESB发送和接受消息
		
		③事件驱动的架构―应用之间异步地产生和接收消息
			
5.ESB的基本功能
	
	1)服务的MetaData管理：在总线范畴内对服务的注册命名及寻址进行管理
	
	2)传输服务：确保通过企业总线互连的业务流程间的消息的正确交付,还包括基于内容的路由功能
	
	3)中介：提供位置透明的路由和定位服务；提供多种消息传递形式；支持广泛使用的传输协议
	
	4)多服务集成方式： 如JCA,Web服务,Messaging ,Adapter等
	
	5)服务和事件管理支持： 调用服务的记录、测量和监控数据；提供事件检测、触发和分布功能
	
6.ESB的扩展功能
	
	1) 面向服务的元数据管理：他必须了解被他中介的两端,即服务的请求以及请求者对服务的要求,以及服务的提供者和他所提供的服务的描述
	
	2) Mediation ：它必须具有某种机制能够完成中介的作用,如协议转换
	
	3) 通信：服务的发布/订阅、响应/请求、同步/异步消息、路由和寻址等
	
	4) 集成： 遗留系统适配器,服务编排和映射,协议转换,数据变换,企业应用集成中间件的连续等
	
	5) 服务交互： 服务接口定义,服务实现的置换,服务消息模型,服务目录和发现等
	
	6) 服务安全： 认证和授权、不可否认和机密性、安全标准的支持等
	
	7) 服务质量： 事务,服务的可交付性等
	
	8) 服务等级： 性能、可用性等
	
	ESB 中最常提到的两个功能是消息转换和消息路由
		
7.Mule ESB
	
	是一种基于java的、轻量级的企业服务总线和集成平台,它允许开发者快速的、简单的连接应用,并能够实现数据的转换

	Mule ESB的主要功能如下：
		
		服务的创建与管理(Service creation and hosting)：用Mule ESB作为一个轻量级的服务容器来暴露和管理可重用的服务
		
		服务调解(Service mediation)：隐藏服务消息的格式和协议,将业务逻辑从消息中独立出来,并可以实现本地独立的服务调用
		
		消息路由(Message routing)：基于内容和规则的消息路由、消息过滤、消息合并和消息的重新排序
		
		数据转换(Data transformation)：在不同的格式和传输协议中进行转换数据

8.什么是ESB
			
	ESB 严格来说不是某一个产品,而是一种框架,设计模式.不同的提供商对 ESB 的理解也各有不同.
	
	从 IBM 的立场来说,ESB 不仅仅是一个概念,而是一种中间件模式；
	
	它不是某个产品,而是一种全新的集成应用,协调资源和操纵信息的框架.
	
	ESB特性:
		
		A.连接性
			
			ESB 必须提供一种支持服务交互的桥梁,它必须支持多协议 (protocol) 之间的连接.
			
			不仅要提供对消息和面向事件的中间件的支持,还要提供和现有 EAI 技术的连接.连接性是 ESB 不可缺少的特征之一.
					
				EAI:
					
					EAI(Enterprise Application Integration,企业应用集成)是将基于各种不同平台、用不同方案建立的异构应用集成的一种方法和技术.
					
					EAI 通过建立底层结构,来联系横贯整个企业的异构系统、应用、数据源等
					
					实现企业内部的 ERP、CRM、SCM、数据库、数据仓库,以及其他重要的内部系统之间无缝地共享和交换数据.
					
					有了 EAI,企业就可以将企业核心应用和新的 Internet解决方案结合在一起.
		
		B.服务交互
			
			服务交互可以理解为ESB的一个目的之一,ESB作为SOA架构的核心,必然要支持服务的交互,要在服务的请求者和提供者间架起一个坚实的桥梁
			
			让服务的请求者和提供者只需要关心各自的业务逻辑,而不需要在发布和消费服务的环节花很大力气.服务交互也是ESB的必备特征
			
		C.集成
			
			集成的概念是对于系统而言的,ESB不仅要能集成name很容易封装服务的系统,也要集成不能方便地封装服务的系统
			
			例如 SAP,ERP,CRM,Siebel等EAI系统、遗留系统.集成也是ESB的核心特征之一
			
		D.消息处理
			
			在集成的过程中,必须要面对的是消息处理,在不同的应用系统中,消息的描述格式是不一样的.
			
			在集成环境中,必须要提供一种统一的格式来处理系统间的交互
			
			从ASBO(Application Specific Business Object) 到 GBO(Generic Business Object)之间的互转是ESB的核心特征之一
		
		E.管理
			
			对于一个具有ESB特征的产品,管理也是一个重要的方面. 
			
			当一个服务从一个地址切换到另一个地址,在结构等不发生任何改变的时候,ESB产品应该提供一个方便的途径适应这种改变
			
		F.QoS
			
			对于服务交互来说,QoS也是一个重要的特征,比如针对不同的服务请求者提供不同质量的服务响应
			
			有些服务的请求需要在事务中完成,有些服务的交互需要保证其可靠性,一个ESB产品应该提供给开发者定义QoS的接口
			
		G.安全
			
			系统和系统之间的交互必然需要认证,授权,加密,签名等安全性.一个优秀的 ESB 产品应该提供可靠的,可灵活配置的安全支持.		
		
9.SOA架构
		
	面向服务的架构(SOA)是一个组件模型,它将应用程序的不同功能单元(称为服务)通过这些服务之间定义良好的接口和契约联系起来.
	
	接口是采用中立的方式进行定义的,它应该独立于实现服务的硬件平台、操作系统和编程语言.
	
	这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互.
	
	是一种粗粒度、开放式、松耦合的服务结构,要求软件产品在开发过程中,按照相关的标准或协议,进行分层开发.
	
	通过这种分层设计或架构体系可以使软件产品变得更加弹性和灵活,且尽可能的与第三方软件产品互补兼容,
	
	以达到快速扩展,满足或响应市场或客户需求的多样化、多变性.
	
10.SOA架构观点
	
	业务驱动IT,即业务驱动和业务更加紧密地联系在一起.
	
	以粗粒度的业务服务作为基础来对公司业务进行建模,这样就可以产生简洁的业务和系统视图;
	
	以业务服务为基础来实现的IT系统更灵活、更易于重用、也更快地应对企业业务需求的变化;
	
	以业务服务为基础,通过显式地方式来定义、描述、实现和管理业务层次的粗粒度服务(包括业务流程),提供了业务服务模型和相关IT业务之间提供了更好的"可追溯性"

11.IBM的三款ESB产品
	
	WebSphere ESB (WESB) 

		WESB 主要构建在WebSphere Application Server 之上, 侧重于对标准协议和消息的支持,更适合于J2EE,Web-Service为主要特征的集成环境
	
		WESB适用于J2EE环境下,对性能要求不是很高的,遵循标准协议的SOA集成
	
	WebSphere Message Broker(WMB)
		
		WMB 提供了一个高级的ESB,它构建于WebSphere Message Queue之上,提供了百种以上协议的连接和数据格式的转换机制
		
		WMB应用更复杂的集成环境,表现为数据格式多种,传输协议多样,性能要求很高
	
	DataPower
	
		Datapower是一款比较新的ESB产品,除了提供必备的ESB特性之外,Datapower更侧重于安全
	
		在安全和性能要求都很高的应用场景下,选择Datapower是更好地选择
		
	WESB 的优势是提供了和流程服务器 WPS 以及 J2EE 服务器 WAS 良好的整合.WESB 适合使用于对性能要求不是很高,且遵循标准协议的 SOA 整合环境中.
	
	WMB支持几乎大部分常用的数据格式和协议.并且提供了良好的扩展功能,开发人员可以在 WMB 基础上开发自己的数据格式解析的节点.处理性能较高.适合于信息传输量较大,信息交互频繁的场景中.
	
	Datapower 使用硬件的 XML 解析和加速器,在性能上有了很大的提高.在安全和性能要求都比较高的环境中,Datapower 是一首选 ESB.	
	
12.面向 ESB 的体系结构：一种错误的采用 SOA 的方式
	
	面向 ESB 的体系结构并不带来业务价值.基于面向 ESB 的体系结构的项目需要成为基于 SOA 的项目,才能帮助确保成功地提供业务价值.
	
	SOA 的主要目标是在业务领域与 IT 领域之间保持一致,从而同时提高二者的效率.
	
	SOA 基于业务需求.SOA 可保持 IT 与业务的一致性,所以SOA还要有很复杂的分析,而ESB并不需要业务需求来实现服务总线.
	
	ESB是在真正需要的时候实现所需的内容,而不要在预计会使用时进行实现.
	
13.ESB与SOA的关系
	
	SOA---面向服务架构
		
		实际上强调的是软件的一种架构,一种支撑软件运行的相对稳定的结构,表面含义如此
		
		其实SOA是一种通过服务整合来解决系统集成的一种思想.不是具体的技术,本质上是一种策略、思想
	
	ESB---企业服务总线
		
		像一根“聪明”的管道,用来连接各个“愚笨”的节点.
		
		为了集成不同系统,不同协议的服务,ESB做了消息的转换解释与路由等工作,让不同的服务互联互通.
	
	目前ESB与SOA的确切概念依然没有.但可以明确的说SOA就是一种服务集成思想,它的不同实现方式可能差别很大,目前SOA最常见的实现方式是SCA和JBI.

	首先,ESB不是SOA.SOA的最常见的实现方式方式是SCA和JBI,而SCA的实现需要ESB,相反JBI则不需要ESB
	
	其次,因为IBM和Oracle都推崇SCA模式的SOA,因此SCA实际上已经成为SOA的事实标准,说到SOA,最先想到的就是SCA模式了
	
	最后,ESB是SCA架构实现不可缺少的一部分,ESB产品脱离了具体的应用外,没有任何意义.
	
	ESB的作用在于实现服务间智能化集成与管理的中介.通过ESB可以访问所集成系统的所有已注册服务
	
	ESB是一种在松散耦合的服务和应用之间标准的集成方式.它可以作用于：
		
		面向服务的架构 - 分布式的应用由可重用的服务组成	
		
		面向消息的架构 - 应用之间通过ESB发送和接受消息
		
		事件驱动的架构 - 应用之间异步地产生和接收消息
		
		ESB就是在SOA架构中实现服务间智能化集成与管理的中介
		