						JAVA对象的序列化和反序列化
				
				把Java对象转换为字节序列的过程称为对象的序列化。
				
				把字节序列恢复为Java对象的过程称为对象的反序列化。
					
		持久化： 
			
				把对象的字节序列永久地保存到硬盘上 通常存放在一个文件中；
				
				休眠的实现。以后服务器session管理，hibernate将对象持久化实现休眠的实现。
				
				以后服务器session管理，hibernate将对象持久化实现。
 			
		网络通信：
				
				在网络上传送对象的字节序列。
				
				服务器之间的数据通信，对象传递
					
					
		java.io.ObjectOutputStream代表对象输出流，
		
			它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。
		
		java.io.ObjectInputStream代表对象输入流，
			
			它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。
		
		
		只有实现了Serializable接口的类的对象才能被序列化。  继承Externalizable 也可以  自定义序列化
		
		Static 类型的成员不被序列化
		
		transient 类型的成员不被序列化   
		
		步骤
		
			实现Serializable接口：
				
				class Person implements Serializable 
		
					serialVersionUID  该类对象的版本号
			
					
			通过ObjectOutputStream 将对象的数据写入到文件中，即序列化。
					Person person = new Person(20,true,"aa");
					FileOutputStream fos = null;;
					ObjectOutputStream oos =null;
						//序列化
					fos = new FileOutputStream("d:/c.txt");
					oos = new ObjectOutputStream(fos);
					oos.writeObject(person);
					oos.flush();
					oos.close();
					fos.close();
					
			通过ObjectInputStream将文件中二进制数据反序列化成Person对象：
			
					ObjectInputStream ois = null;
					FileInputStream fis = null;
					//反序列化
					fis = new FileInputStream("d:/c.txt");
					ois = new ObjectInputStream(fis);
					Person p = (Person) ois.readObject();
					System.out.println(p.name);		