								JavaScript  客户端脚本语言
								
	HTML 描述页面内容   CSS  描述页面样式    JavaScript 描述页面行为
								
	JavaScript是由Netscape（网景）公司研发出来的一种在它的Navigator浏览器上执行的程序语言。 

	JavaScript是一种基于对象(object-based)和事件驱动(Event Driven)的简单的并具有安全性能的脚本语言。
			
	由  ECMAScript  欧洲计算机制造者协会 （核心语法）、DOM 文档对象模型  （用于操作浏览器内容节点）、BOM  浏览器对象模型 (用于操作浏览器窗口)  组成   
			 
			
		JScript :Microsoft 公司在Netscape 公司发布的JavaScript的基础上，也开发了自己的JavaScript规范，叫JScript 

		ECMAscript:国际上通用的标准化版本的JavaScript，是未来JavaScript的发展方向

		VBScript ：Microsoft开发的VB家族的成员，与JavaScript运行原理相同。但是，目前只有IE浏览器支持VBScript 
		
	脚本语言
	
		是一种简单的程序，是由一些ASCII字符构成，可以使用任何一种文本编辑器编写。
	
		脚本语言不需要事先编译，只要有一个与其相适应的解释器就可以执行
			
		脚本语言是指在web浏览器内有解释器解释执行的编程语言，每次运行程序的时候，解释器会把程序代码翻译成可执行的格式。
	
	基于对象
	
		面向对象有三大特点（封装，继承，多态）缺一不可。
		
		通常“基于对象”是使用对象，但是无法利用现有的对象模板产生新的对象类型，也就是说“基于对象”没有继承的特点。没有了继承的概念也就无从谈论“多态”		
	
	事件驱动
		
		在网页中执行了某种操作的动作，被称为“事件”(Event)
		
		比如按下鼠标、移动窗口、选择菜单等都可以视为事件。当事件发生后，可能会引起相应的事件响应。
			
	简单性 
		
		变量类型是采用弱类型，并未使用严格的数据类型。 var
		
	安全性 
		
		JavaScript不允许访问本地的硬盘，不能将数据存入到服务器上
		
		不能对网络文档进行修改和删除，只能通过浏览器实现信息浏览或动态交互
		
	跨平台性
		
		JavaScript依赖于浏览器本身，与操作平台无关，
		
		只要计算机安装了支持JavaScript 的浏览器（装有JavaScript解释器），JavaScript 程序就可以正确执行。

	JavaScript脚本从服务器端下载到本地客户端，再由浏览器进行解析和执行。是在客户端执行而不是在服务器端执行。
		
	JSP是在服务器执行，是服务端技术。
		
	JS是客户端技术。

	JS执行过程
	
		step 1. ?读入第一个代码块。
	
		step 2. ?做语法分析，有错则报语法错误 （比如括号不匹配等），并跳转到step5。
	
		step 3. ?对var变量和function定义做“预解释处理” （永远不会报错的，因为只解析正确的声明）。
	
		step 4. ?执行代码段，有错则报错（比如变量未定义）。
	
		step 5. ?如果还有下一个代码段，则读入下一个代码段，重复step2。
	
		step6. 结束。
		
	
	引入和声明
	
		方式1：
			
			事件名=“JS代码”

		方式2 ：
			
			<script>
				
				JS代码块
			
			</script>

		方式3：
			
			引入外部JS文件
			
			<script src="myjs.js" type=“text/javascript"></script>
	
	JavaScript操作CSS的两种方式	
	
		方式一：通过style对象  
			
			var p = document.getElementById("p") ;
			
				p.style.color = "red" ;  
			
		方式二：通过className指定类选择器
					
				p.className = "one" ; 	
				
	
数据类型

		原生类型和对象类型
	
	原生对象 自身不等于自身  
	
		数值型：number
		
			infinity 正无穷  由1/0  得到
			
			NaN  not a number  
		
			整数和浮点数统称为数值。例如85或3.1415926等。

		字符串型： string

			由0个,1个或多个字符组成的序列。 不区分单引号、双引号

		逻辑（布尔）型  boolean：    
		
				用true或false来表示。
				
		特殊类型

			空（null）值  object：
		
					表示没有值，用于定义空的或不存在的引用。

			未定义（undefined）值  ：
		
					它也是一个保留字。表示变量虽然已经声明，但却没有赋值。
					
			undefined 和null 比较相等 为 真

	对象类型
				
		复合数据类型
				对象、数组。
		
		函数
		
等同符  
		不会发生隐式转换,既比较类型又比较数值
		
		alert(num1===num2);//false  
		
等值符  
		
		会发生隐式转换, 比较数值是否相等

		alert(num1==num2); //true  
		
			
隐式转换
		
		做加法运算时,所有类型都想number 类型靠拢
			
			boolean类型 true=1 ,false-0
		
		遇见string 加号变成连接符 不会进行加法运算
		
变量

	弱类型  var  JavaScript中的变量可以是任何一种数据类型。
		
	变量的作用范围
		
		当在一个函数之外定义一个变量，那这个变量就叫做全局变量。全局变量可用于当前所有的文档。
		
		在函数内部定义的变量则叫做局部变量，它只作用于函数内部。

	变量是弱类型，但是常量还是有数据类型的

	代码区分大小写，不区分单引号双引号

	变量、对象和函数的名称

	分号可以省略，但不建议省略
	
	typeof  得到数据类型
	
		var pi =3.1415926;
		
		alert (typeof pi);
	
	
	1.
	//九九乘法表
				for (var i = 1; i < 10; i++) {
					for (var j = 1; j < i; j++) {
						document.write(j + '*' + i + "=" + (j * i) + "&emsp;")
					}
					document.write("<br/>")
				}	
	
	2.
	
函数

	类似于Java中的方法，是完成特定任务的代码语句块
	
	使用更简单：不用定义属于某个类，直接使用
	
	JavaScript函数分为系统函数和自定义函数
	
	
	三种方式 
	
		1.
		function test(a,b){
			alert(a+b);
		}
		
		2. 
		var test=new Function('a','b''alert(a+b)');
		
		3.
			匿名函数
			var test=function(){
				alert(1+2);
			}
		
	
	
自定义函数
	
	自定义函数不会自动执行，需要调用才会执行
	
	无论是否有返回值，都无需指定返回值类型。
	
	默认函数返回值是undefined   手动设置返回值用 return  

	JS中函数的重载
		
		在JS中没有重载
		
		手动模拟实现重载 获取函数实参的个数实现
		
				实参个数：函数名.arguments .length
					
				形参个数: 函数名.length;	

JS刷新页面的方法:
	
	1 history.go(0)

	2 location.reload()

	3 location=location

	4 location.assign(location)

	5 document.execCommand(‘Refresh‘)

	6 window.navigate(location)

	7 location.replace(location)

	8 document.URL=location.href.